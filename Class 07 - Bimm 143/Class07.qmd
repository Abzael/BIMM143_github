---
title: "Class 07"
author: "Abzael Verduzco (A15942210)"
format: pdf
---

# Clustering 

We will start today's lab with clustering methods, in particular so-called k-means. The main function for this in R is `kmeans()`.

Let's try it on made up data where we know what the answer should be. 

```{r}
x <- rnorm(10000, mean =3)
hist(x)
```

60 points
```{r}
tmp <- c(rnorm(30, mean=3), rnorm(30,-3))
x <- cbind(x=tmp, y=rev(tmp))
head(x)
```

We can pass this to the base R `plot()` function for a quick. 

```{r}
plot(x)
```

```{r}
k <- kmeans(x, centers = 2, nstart = 20)
k
```

>Q1. How many points are in each cluster? 

```{r}
k$size
```

>Q2. Cluster membership? 

```{r}
k$cluster
```


>Q3. Cluster centers?

```{r}
k$centers
```

>Q4. Plot my clustering results

```{r}
plot(x, col=k$cluster, pch=16)
```

>Q.5 Cluster the data again with kmeans() into 4 groups and plot the results. 

```{r}
k4 <- kmeans(x, centers = 4, nstart = 20)

plot(x,col=k4$cluster, pch=16)
```

K-means is very popular mostly because it is fast and relatively straightforward to run and understand. It has a big limitation in that you need to tall it how many groups (k, or centers) you want. 


# Hierarchical clustering 

The main function in base R is called `hclust()`. You have to pass it in a "distance matrix" not just your input data. 

You can generate a distance matrix with the `dist()` function. 

```{r}
hc<-hclust( dist(x) )
hc
```

```{r}
plot(hc)
```

To find clusters (cluster membership vector) from a `hclust()` result we can "cut" the tree at a certain height we like. Fot this we use the `cutree()` function.

```{r}
plot(hc)
abline(h=8, col="red")
grps <- cutree(hc, h=8)
```

```{r}
table(grps)
```

>Q6. PLor our hclust results. 

```{r}
plot(x, col=grps, pch=16)
```


# Principal Component Analysis 

##PCA of UK food data


Let's 

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
x
View(x)
```

>Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

There are 17 rows and 4 columns, we could use the following functions: 

```{r}
nrow(x) 
ncol(x)
#or 
dim(x)
```

#Checking your data

```{r}
## Previw the first 6 rows
head(x)
```

```{r}
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```

or 

```{r}
x <- read.csv(url, row.names=1)
head(x)
```

>Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer the second approach as it will reach the same answer, as the first one will reset the date and if I were to run it again it would delete the following column that is England. 

#Spotting major differenes and trends 

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```

>Q3: Changing what optional argument in the above barplot() function results in the following plot?

Changing the besides to False results in the following plot. As when it FALSE, the columns of height are portrayed as stacked bars. 

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

>Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

The following code results in a plot comparing the comsumption between two of the country, one that is on the same row and the other in the same column as the plot. Then, when a point lies in the diagonal, this means that a certain product is comsumpted in a similar amount between both countries. 

```{r}
pairs(x, col=rainbow(10), pch=16)
```

>Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

The biggest difference between the UK and N.Ireland, is the consumption of fresh_potatoes as Ireland has an overwhelmingly larger amount of consumption. 

## Principal Component Analysis (PCA)

PCA can help us make sens of these types of datasets. Let's see how it works. 

The main function in "base" R is called `prcomp()`. In this case we want to fist take the transpose of our input `x` so the columns are the food types and the countries are the rows. 

```{r}
head( t(x) )
```
```{r}
pca <- prcomp( t(x) )
summary(pca)
```

```{r}
pca$x
```
>Q.7 Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points. 

```{r}
plot(pca$x[,1], pca$x[,2], col=c('orange', 'red', 'blue', 'darkgreen'), pch = 16)
```
>Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[,1], pca$x[,2])
text(pca$x[,1], pca$x[,2], colnames(x), col=c('orange', 'red', 'blue', 'darkgreen') )
```


```{r}
head(pca$rotation)
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```

```{r}
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

```{r}
##Lets focus on PC1 as it accounts for > 90% variance.
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```
>Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```

PC2 tells us about the difference in consumption between Wales and Scotland, with Wales consuming way more fresh_potatoes than Scotland and Scotland consuming way more soft drinks. 